name: Build

run-name: >
  ${{ github.workflow }}: ${{ github.event_name }} for ${{ github.ref_name }} by @${{ github.actor }}

on:
  push:
    paths:
      - 'app/**'
      - 'infra/**'
  workflow_dispatch:

permissions: 
  id-token: write

jobs:
  Build-API:
    runs-on: ubuntu-latest
    environment: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ENTRA_CLIENT_ID }}
          tenant-id: ${{ secrets.ENTRA_TENANT_ID }}
          subscription-id: ${{ secrets.ENTRA_SUBSCRIPTION_ID }}

      - name: Azure Container Registry Login
        run: |
          az acr login --name ${{ secrets.AZURE_ACR_NAME }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Docker Image to ACR
        run: |
          cd app
          # Build the Docker image with a tag based on the commit SHA
          docker build -t ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
          
          # Push the image with the commit SHA tag
          docker push ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          
          # If running on the main branch, also tag and push as "latest"
          if [ "${{ github.ref_name }}" == "main" ]; then
            docker tag ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ secrets.DOCKER_IMAGE_NAME }}:latest
            docker push ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ secrets.DOCKER_IMAGE_NAME }}:latest
          fi

  Test-IaC:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Lint
        run: |
          az bicep lint --file infra/main.bicep

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: | 
          $report = Invoke-ScriptAnalyzer -Path . -Recurse -ReportSummary
          if ($report.Count -eq 0) {
              $markdownReport = "### No issues found :white_check_mark:"
          } else {
              $markdownReport = "### PSScriptAnalyzer Report :warning:`n"
              $markdownReport += "| RuleName | Severity | ScriptName | Line | Message |`n"
              $markdownReport += "| --- | --- | --- | --- | --- |`n"
              foreach ($item in $report) {
                  $markdownReport += "| $($item.RuleName) | $($item.Severity) | $($item.ScriptName) | $($item.Line) | $($item.Message) |`n"
              }
          }
          $markdownReport | Out-String | Set-Content -Path $env:GITHUB_STEP_SUMMARY

  WAF-IaC:
    runs-on: ubuntu-latest
    needs: Test-IaC
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Test Azure Well-Architected Framework with PSRule
        uses: Microsoft/ps-rule@v2.9.0
        with:
          modules: PSRule.Rules.Azure
          inputType: inputPath
          inputPath: 'infra/main.bicep'

  Infra-Deployment:
    runs-on: ubuntu-latest
    needs: [Test-IaC, WAF-IaC, Build-API]
    environment: infra    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ENTRA_CLIENT_ID }}
          tenant-id: ${{ secrets.ENTRA_TENANT_ID }}
          subscription-id: ${{ secrets.ENTRA_SUBSCRIPTION_ID }}

      - name: Infra Deployment
        id: infra-deployment
        uses: azure/bicep-deploy@bed0974555908ee0609c2b50aceb984cb50ea68b
        with:
          type: deployment
          operation: create
          name: ${{ github.run_id }}
          location: 'switzerlandnorth'
          scope: subscription
          subscription-id: ${{ secrets.ENTRA_SUBSCRIPTION_ID }}
          template-file: infra/main.bicep
          parameters: |
            {
              "dockerImage": "${{ secrets.AZURE_ACR_NAME }}.azurecr.io/${{ secrets.DOCKER_IMAGE_NAME }}:${{ github.sha }}",
              "acrPassword": "${{ secrets.AZURE_ACR_PASSWORD }}"
            }

      - name: Print Deployment Outputs
        run: |
          echo "intOutput: ${{ steps.infra-deployment.outputs.intOutput }}"
          echo "stringOutput: ${{ steps.infra-deployment.outputs.stringOutput }}"